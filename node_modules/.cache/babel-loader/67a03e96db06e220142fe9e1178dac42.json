{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wrade\\\\Desktop\\\\weather\\\\frontend\\\\src\\\\components\\\\Forecast\\\\Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Condition from '../Conditions/Conditions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const [city, setCity] = useState('');\n  const [unit, setUnit] = useState('imperial');\n  const [responseObj, setResponseObj] = useState({});\n  const uriEncodedCity = encodeURIComponent(city);\n\n  function getForecast(e) {\n    e.preventDefault();\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"3d81810033msh4083baf2f7e8eb3p19d736jsn9bb433da78ba\"\n      }\n    }).then(response => response.json()).then(response => {\n      setResponseObj(response);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditons\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Condition, {\n        responseObj: responseObj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      on: true,\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        value: city,\n        onChange: e => setCity(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === 'imperial',\n          value: \"imperial\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === 'metric',\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), \"Celcius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Forecast, \"yJvU7ly0bqhJpez3tggOT8HX4zY=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["C:/Users/wrade/Desktop/weather/frontend/src/components/Forecast/Forecast.js"],"names":["React","useState","Condition","Forecast","city","setCity","unit","setUnit","responseObj","setResponseObj","uriEncodedCity","encodeURIComponent","getForecast","e","preventDefault","fetch","then","response","json","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,UAAD,CAAhC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAMS,cAAc,GAAGC,kBAAkB,CAACP,IAAD,CAAzC;;AAEA,WAASQ,WAAT,CAAqBC,CAArB,EAAwB;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,KAAK,CAAE,mEAAkET,IAAK,MAAKI,cAAe,EAA7F,EAAgG;AACxG,gBAAU,KAD8F;AAExG,iBAAW;AACV,2BAAmB,2CADT;AAEV,0BAAkB;AAFR;AAF6F,KAAhG,CAAL,CASHM,IATG,CASEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATd,EAUDF,IAVC,CAUIC,QAAQ,IAAI;AAChBR,MAAAA,cAAc,CAACQ,QAAD,CAAd;AACD,KAZC;AAaD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,WAAW,EAAET;AADf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF,eASE;AAAM,MAAA,EAAE,MAAR;AAAS,MAAA,QAAQ,EAAEI,WAAnB;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,YAFd;AAGE,QAAA,SAAS,EAAC,IAHZ;AAIE,QAAA,KAAK,EAAER,IAJT;AAKE,QAAA,QAAQ,EAAGS,CAAD,IAAOR,OAAO,CAACQ,CAAC,CAACM,MAAF,CAASC,KAAV;AAL1B;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,OAAO,EAAEd,IAAI,KAAK,UAHpB;AAIE,UAAA,KAAK,EAAC,UAJR;AAKE,UAAA,QAAQ,EAAGO,CAAD,IAAON,OAAO,CAAEM,CAAC,CAACM,MAAF,CAASC,KAAX;AAL1B;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,eAkBE;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,OAAO,EAAEd,IAAI,KAAK,QAHpB;AAIE,UAAA,KAAK,EAAC,QAJR;AAKE,UAAA,QAAQ,EAAGO,CAAD,IAAON,OAAO,CAACM,CAAC,CAACM,MAAF,CAASC,KAAV;AAL1B;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF,eA4BE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6CD,CArED;;GAAMjB,Q;;KAAAA,Q;AAuEN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport Condition from '../Conditions/Conditions';\r\n\r\nconst Forecast = () => {\r\n  const [city, setCity] = useState('');\r\n  const [unit, setUnit] = useState('imperial');\r\n  const [responseObj, setResponseObj] = useState({});\r\n\r\n  const uriEncodedCity = encodeURIComponent(city);\r\n\r\n  function getForecast(e) {\r\n    e.preventDefault()\r\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\r\n\t\"method\": \"GET\",\r\n\t\"headers\": {\r\n\t\t\"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\r\n\t\t\"x-rapidapi-key\": \"3d81810033msh4083baf2f7e8eb3p19d736jsn9bb433da78ba\"\r\n\r\n\t}\r\n  \r\n})\r\n.then(response => response.json())\r\n  .then(response => {\r\n    setResponseObj(response)\r\n  })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Find Current Weather Conditons\r\n      </h2>\r\n      <div>\r\n        <Condition\r\n          responseObj={responseObj}\r\n        />\r\n      </div>\r\n      <form on onSubmit={getForecast}>\r\n        <input  \r\n          type='text'\r\n          placeholder='Enter City'\r\n          maxLength='50'\r\n          value={city}\r\n          onChange={(e) => setCity(e.target.value)}\r\n        />\r\n        <label>\r\n          <input\r\n            type='radio'\r\n            name='units'\r\n            checked={unit === 'imperial'}\r\n            value='imperial'\r\n            onChange={(e) => setUnit (e.target.value)}\r\n          />\r\n          Fahrenheit\r\n        </label>\r\n        <label>\r\n          <input\r\n            type='radio'\r\n            name='units'\r\n            checked={unit === 'metric'}\r\n            value='metric'\r\n            onChange={(e) => setUnit(e.target.value)}\r\n            />\r\n            Celcius\r\n        </label>\r\n        <button type='submit'>Get Forecast</button>\r\n      </form>\r\n\r\n     \r\n    </div>\r\n\r\n  )\r\n} \r\n\r\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}